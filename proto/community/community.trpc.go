// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: community/community.proto

package community

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// GetTopicServiceService defines service.
type GetTopicServiceService interface {
	GetTopicById(ctx context.Context, req *GetTopicRequest) (*GetTopicResponse, error) // @alias=/demo/community/topic

	GetPostByTopicId(ctx context.Context, req *GetPostRequest) (*GetPostResponse, error) // @alias=/demo/community/post
}

func GetTopicServiceService_GetTopicById_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetTopicRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GetTopicServiceService).GetTopicById(ctx, reqbody.(*GetTopicRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func GetTopicServiceService_GetPostByTopicId_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetPostRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(GetTopicServiceService).GetPostByTopicId(ctx, reqbody.(*GetPostRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// GetTopicServiceServer_ServiceDesc descriptor for server.RegisterService.
var GetTopicServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "demo.community.GetTopicService",
	HandlerType: ((*GetTopicServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/demo/community/topic",
			Func: GetTopicServiceService_GetTopicById_Handler,
		},
		{
			Name: "/demo/community/post",
			Func: GetTopicServiceService_GetPostByTopicId_Handler,
		},
		{
			Name: "/demo.community.GetTopicService/GetTopicById",
			Func: GetTopicServiceService_GetTopicById_Handler,
		},
		{
			Name: "/demo.community.GetTopicService/GetPostByTopicId",
			Func: GetTopicServiceService_GetPostByTopicId_Handler,
		},
	},
}

// RegisterGetTopicServiceService registers service.
func RegisterGetTopicServiceService(s server.Service, svr GetTopicServiceService) {
	if err := s.Register(&GetTopicServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("GetTopicService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedGetTopicService struct{}

func (s *UnimplementedGetTopicService) GetTopicById(ctx context.Context, req *GetTopicRequest) (*GetTopicResponse, error) {
	return nil, errors.New("rpc GetTopicById of service GetTopicService is not implemented")
}
func (s *UnimplementedGetTopicService) GetPostByTopicId(ctx context.Context, req *GetPostRequest) (*GetPostResponse, error) {
	return nil, errors.New("rpc GetPostByTopicId of service GetTopicService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// GetTopicServiceClientProxy defines service client proxy
type GetTopicServiceClientProxy interface {
	GetTopicById(ctx context.Context, req *GetTopicRequest, opts ...client.Option) (rsp *GetTopicResponse, err error) // @alias=/demo/community/topic

	GetPostByTopicId(ctx context.Context, req *GetPostRequest, opts ...client.Option) (rsp *GetPostResponse, err error) // @alias=/demo/community/post
}

type GetTopicServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewGetTopicServiceClientProxy = func(opts ...client.Option) GetTopicServiceClientProxy {
	return &GetTopicServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *GetTopicServiceClientProxyImpl) GetTopicById(ctx context.Context, req *GetTopicRequest, opts ...client.Option) (*GetTopicResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/demo/community/topic")
	msg.WithCalleeServiceName(GetTopicServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GetTopicService")
	msg.WithCalleeMethod("GetTopicById")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetTopicResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *GetTopicServiceClientProxyImpl) GetPostByTopicId(ctx context.Context, req *GetPostRequest, opts ...client.Option) (*GetPostResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/demo/community/post")
	msg.WithCalleeServiceName(GetTopicServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GetTopicService")
	msg.WithCalleeMethod("GetPostByTopicId")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetPostResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
